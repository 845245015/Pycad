<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        4IP///AD///4A////AH///4B////gf////k=
</value>
  </data>
</root>