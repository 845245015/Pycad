import __clrclasses__.System.Security.Principal as Principal
import __clrclasses__.System.Security.Policy as Policy
import __clrclasses__.System.Security.Claims as Claims
import __clrclasses__.System.Security.Authentication as Authentication
import __clrclasses__.System.Security.Cryptography as Cryptography
import __clrclasses__.System.Security.Permissions as Permissions
import __clrclasses__.System.Security.AccessControl as AccessControl
from __clrclasses__.System import Attribute as _n_0_t_0
from __clrclasses__.System import SystemException as _n_0_t_1
from __clrclasses__.System import Exception as _n_0_t_2
from __clrclasses__.System import Type as _n_0_t_3
from __clrclasses__.System import Array as _n_0_t_4
from __clrclasses__.System import Enum as _n_0_t_5
from __clrclasses__.System import IComparable as _n_0_t_6
from __clrclasses__.System import IFormattable as _n_0_t_7
from __clrclasses__.System import IConvertible as _n_0_t_8
from __clrclasses__.System import Byte as _n_0_t_9
from __clrclasses__.System import IDisposable as _n_0_t_10
from __clrclasses__.System import Char as _n_0_t_11
from __clrclasses__.System import IntPtr as _n_0_t_12
from __clrclasses__.System.Collections import ICollection as _n_1_t_0
from __clrclasses__.System.Collections import Hashtable as _n_1_t_1
from __clrclasses__.System.Collections import ArrayList as _n_1_t_2
from __clrclasses__.System.Collections import IEnumerator as _n_1_t_3
from __clrclasses__.System.Reflection import Assembly as _n_2_t_0
from __clrclasses__.System.Reflection import AssemblyName as _n_2_t_1
from __clrclasses__.System.Reflection import MethodInfo as _n_2_t_2
from __clrclasses__.System.Runtime.InteropServices import _Attribute as _n_3_t_0
from __clrclasses__.System.Runtime.InteropServices import _Exception as _n_3_t_1
from __clrclasses__.System.Runtime.Serialization import ISerializable as _n_4_t_0
from __clrclasses__.System.Runtime.Serialization import IDeserializationCallback as _n_4_t_1
from __clrclasses__.System.Security.Permissions import HostProtectionResource as _n_5_t_0
from __clrclasses__.System.Security.Permissions import PermissionState as _n_5_t_1
from __clrclasses__.System.Security.Permissions import SecurityAction as _n_5_t_2
from __clrclasses__.System.Security.Policy import PolicyLevel as _n_6_t_0
from __clrclasses__.System.Security.Policy import ApplicationTrust as _n_6_t_1
from __clrclasses__.System.Security.Policy import Evidence as _n_6_t_2
from __clrclasses__.System.Security.Policy import TrustManagerContext as _n_6_t_3
from __clrclasses__.System.Security.Policy import EvidenceBase as _n_6_t_4
from __clrclasses__.System.Threading import ContextCallback as _n_7_t_0
from __clrclasses__.System.Threading import AsyncFlowControl as _n_7_t_1
import typing
class AllowPartiallyTrustedCallersAttribute(_n_0_t_0, _n_3_t_0):
    @property
    def PartialTrustVisibilityLevel(self) -> PartialTrustVisibilityLevel:"""PartialTrustVisibilityLevel { get; set; } -> PartialTrustVisibilityLevel"""
    def __init__(self) -> AllowPartiallyTrustedCallersAttribute:...
class CodeAccessPermission(IPermission, IStackWalk):
    @staticmethod
    def RevertAll():...
    @staticmethod
    def RevertAssert():...
    @staticmethod
    def RevertDeny():...
    @staticmethod
    def RevertPermitOnly():...
class HostProtectionException(_n_0_t_1, _n_4_t_0, _n_3_t_1):
    @property
    def DemandedResources(self) -> _n_5_t_0:"""DemandedResources { get; } -> HostProtectionResource"""
    @property
    def ProtectedResources(self) -> _n_5_t_0:"""ProtectedResources { get; } -> HostProtectionResource"""
    def __init__(self, message: str, protectedResources: _n_5_t_0, demandedResources: _n_5_t_0) -> HostProtectionException:...
    def __init__(self, message: str, e: _n_0_t_2) -> HostProtectionException:...
    def __init__(self, message: str) -> HostProtectionException:...
    def __init__(self) -> HostProtectionException:...
class HostSecurityManager(object):
    @property
    def DomainPolicy(self) -> _n_6_t_0:"""DomainPolicy { get; } -> PolicyLevel"""
    @property
    def Flags(self) -> HostSecurityManagerOptions:"""Flags { get; } -> HostSecurityManagerOptions"""
    def __init__(self) -> HostSecurityManager:...
    def DetermineApplicationTrust(self, applicationEvidence: _n_6_t_2, activatorEvidence: _n_6_t_2, context: _n_6_t_3) -> _n_6_t_1:...
    def GenerateAppDomainEvidence(self, evidenceType: _n_0_t_3) -> _n_6_t_4:...
    def GenerateAssemblyEvidence(self, evidenceType: _n_0_t_3, assembly: _n_2_t_0) -> _n_6_t_4:...
    def GetHostSuppliedAppDomainEvidenceTypes(self) -> _n_0_t_4[_n_0_t_3]:...
    def GetHostSuppliedAssemblyEvidenceTypes(self, assembly: _n_2_t_0) -> _n_0_t_4[_n_0_t_3]:...
    def ProvideAppDomainEvidence(self, inputEvidence: _n_6_t_2) -> _n_6_t_2:...
    def ProvideAssemblyEvidence(self, loadedAssembly: _n_2_t_0, inputEvidence: _n_6_t_2) -> _n_6_t_2:...
    def ResolvePolicy(self, evidence: _n_6_t_2) -> PermissionSet:...
class HostSecurityManagerOptions(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    AllFlags: int
    HostAppDomainEvidence: int
    HostAssemblyEvidence: int
    HostDetermineApplicationTrust: int
    HostPolicyLevel: int
    HostResolvePolicy: int
    _None: int
    value__: int
class IEvidenceFactory():
    @property
    def Evidence(self) -> _n_6_t_2:"""Evidence { get; } -> Evidence"""
class IPermission(ISecurityEncodable):
    def Copy(self) -> IPermission:...
    def Demand(self):...
    def Intersect(self, target: IPermission) -> IPermission:...
    def IsSubsetOf(self, target: IPermission) -> bool:...
    def Union(self, target: IPermission) -> IPermission:...
class ISecurityEncodable():
    def FromXml(self, e: SecurityElement):...
    def ToXml(self) -> SecurityElement:...
class ISecurityPolicyEncodable():
    def FromXml(self, e: SecurityElement, level: _n_6_t_0):...
    def ToXml(self, level: _n_6_t_0) -> SecurityElement:...
class IStackWalk():
    def Assert(self):...
    def Demand(self):...
    def Deny(self):...
    def PermitOnly(self):...
class ManifestKinds(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    Application: int
    ApplicationAndDeployment: int
    Deployment: int
    _None: int
    value__: int
class NamedPermissionSet(PermissionSet, ISecurityEncodable, _n_1_t_0, IStackWalk, _n_4_t_1):
    @property
    def Description(self) -> str:"""Description { get; set; } -> str"""
    @property
    def Name(self) -> str:"""Name { get; set; } -> str"""
    def __init__(self, name: str, permSet: PermissionSet) -> NamedPermissionSet:...
    def __init__(self, name: str, state: _n_5_t_1) -> NamedPermissionSet:...
    def __init__(self, name: str) -> NamedPermissionSet:...
    def __init__(self, permSet: NamedPermissionSet) -> NamedPermissionSet:...
class PartialTrustVisibilityLevel(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    NotVisibleByDefault: int
    value__: int
    VisibleToAllHosts: int
class PermissionSet(ISecurityEncodable, _n_1_t_0, IStackWalk, _n_4_t_1):
    @property
    def IsReadOnly(self) -> bool:"""IsReadOnly { get; } -> bool"""
    def __init__(self, permSet: PermissionSet) -> PermissionSet:...
    def __init__(self, state: _n_5_t_1) -> PermissionSet:...
    def AddPermission(self, perm: IPermission) -> IPermission:...
    def ContainsNonCodeAccessPermissions(self) -> bool:...
    @staticmethod
    def ConvertPermissionSet(inFormat: str, inData: _n_0_t_4[_n_0_t_9], outFormat: str) -> _n_0_t_4[_n_0_t_9]:...
    def Copy(self) -> PermissionSet:...
    def GetPermission(self, permClass: _n_0_t_3) -> IPermission:...
    def Intersect(self, other: PermissionSet) -> PermissionSet:...
    def IsEmpty(self) -> bool:...
    def IsSubsetOf(self, target: PermissionSet) -> bool:...
    def IsUnrestricted(self) -> bool:...
    def RemovePermission(self, permClass: _n_0_t_3) -> IPermission:...
    @staticmethod
    def RevertAssert():...
    def SetPermission(self, perm: IPermission) -> IPermission:...
    def Union(self, other: PermissionSet) -> PermissionSet:...
class PolicyLevelType(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    AppDomain: int
    Enterprise: int
    Machine: int
    User: int
    value__: int
class ReadOnlyPermissionSet(PermissionSet, ISecurityEncodable, _n_1_t_0, IStackWalk, _n_4_t_1):
    def __init__(self, permissionSetXml: SecurityElement) -> ReadOnlyPermissionSet:...
class SecureString(_n_0_t_10):
    @property
    def Length(self) -> int:"""Length { get; } -> int"""
    def __init__(self, value: _n_0_t_11, length: int) -> SecureString:...
    def __init__(self) -> SecureString:...
    def AppendChar(self, c: _n_0_t_11):...
    def Clear(self):...
    def Copy(self) -> SecureString:...
    def InsertAt(self, index: int, c: _n_0_t_11):...
    def IsReadOnly(self) -> bool:...
    def MakeReadOnly(self):...
    def RemoveAt(self, index: int):...
    def SetAt(self, index: int, c: _n_0_t_11):...
class SecureStringMarshal(object):
    @staticmethod
    def SecureStringToCoTaskMemAnsi(s: SecureString) -> _n_0_t_12:...
    @staticmethod
    def SecureStringToCoTaskMemUnicode(s: SecureString) -> _n_0_t_12:...
    @staticmethod
    def SecureStringToGlobalAllocAnsi(s: SecureString) -> _n_0_t_12:...
    @staticmethod
    def SecureStringToGlobalAllocUnicode(s: SecureString) -> _n_0_t_12:...
class SecurityContext(_n_0_t_10):
    @staticmethod
    def Capture() -> SecurityContext:...
    def CreateCopy(self) -> SecurityContext:...
    @staticmethod
    def IsFlowSuppressed() -> bool:...
    @staticmethod
    def IsWindowsIdentityFlowSuppressed() -> bool:...
    @staticmethod
    def RestoreFlow():...
    @staticmethod
    def Run(securityContext: SecurityContext, callback: _n_7_t_0, state: object):...
    @staticmethod
    def SuppressFlow() -> _n_7_t_1:...
    @staticmethod
    def SuppressFlowWindowsIdentity() -> _n_7_t_1:...
class SecurityContextSource(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    CurrentAppDomain: int
    CurrentAssembly: int
    value__: int
class SecurityCriticalAttribute(_n_0_t_0, _n_3_t_0):
    @property
    def Scope(self) -> SecurityCriticalScope:"""Scope { get; } -> SecurityCriticalScope"""
    def __init__(self, scope: SecurityCriticalScope) -> SecurityCriticalAttribute:...
    def __init__(self) -> SecurityCriticalAttribute:...
class SecurityCriticalScope(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    Everything: int
    Explicit: int
    value__: int
class SecurityElement(ISecurityElementFactory):
    @property
    def Attributes(self) -> _n_1_t_1:"""Attributes { get; set; } -> Hashtable"""
    @property
    def Children(self) -> _n_1_t_2:"""Children { get; set; } -> ArrayList"""
    @property
    def Tag(self) -> str:"""Tag { get; set; } -> str"""
    @property
    def Text(self) -> str:"""Text { get; set; } -> str"""
    def __init__(self, tag: str, text: str) -> SecurityElement:...
    def __init__(self, tag: str) -> SecurityElement:...
    def AddAttribute(self, name: str, value: str):...
    def AddChild(self, child: SecurityElement):...
    def Equal(self, other: SecurityElement) -> bool:...
    @staticmethod
    def Escape(str: str) -> str:...
    @staticmethod
    def FromString(xml: str) -> SecurityElement:...
    @staticmethod
    def IsValidAttributeName(name: str) -> bool:...
    @staticmethod
    def IsValidAttributeValue(value: str) -> bool:...
    @staticmethod
    def IsValidTag(tag: str) -> bool:...
    @staticmethod
    def IsValidText(text: str) -> bool:...
    def SearchForChildByTag(self, tag: str) -> SecurityElement:...
    def SearchForTextOfTag(self, tag: str) -> str:...
class SecurityException(_n_0_t_1, _n_4_t_0, _n_3_t_1):
    @property
    def Action(self) -> _n_5_t_2:"""Action { get; set; } -> SecurityAction"""
    @property
    def Demanded(self) -> object:"""Demanded { get; set; } -> object"""
    @property
    def DenySetInstance(self) -> object:"""DenySetInstance { get; set; } -> object"""
    @property
    def FailedAssemblyInfo(self) -> _n_2_t_1:"""FailedAssemblyInfo { get; set; } -> AssemblyName"""
    @property
    def FirstPermissionThatFailed(self) -> IPermission:"""FirstPermissionThatFailed { get; set; } -> IPermission"""
    @property
    def GrantedSet(self) -> str:"""GrantedSet { get; set; } -> str"""
    @property
    def Method(self) -> _n_2_t_2:"""Method { get; set; } -> MethodInfo"""
    @property
    def PermissionState(self) -> str:"""PermissionState { get; set; } -> str"""
    @property
    def PermissionType(self) -> _n_0_t_3:"""PermissionType { get; set; } -> Type"""
    @property
    def PermitOnlySetInstance(self) -> object:"""PermitOnlySetInstance { get; set; } -> object"""
    @property
    def RefusedSet(self) -> str:"""RefusedSet { get; set; } -> str"""
    @property
    def Url(self) -> str:"""Url { get; set; } -> str"""
    @property
    def Zone(self) -> SecurityZone:"""Zone { get; set; } -> SecurityZone"""
    def __init__(self, message: str, deny: object, permitOnly: object, method: _n_2_t_2, demanded: object, permThatFailed: IPermission) -> SecurityException:...
    def __init__(self, message: str, assemblyName: _n_2_t_1, grant: PermissionSet, refused: PermissionSet, method: _n_2_t_2, action: _n_5_t_2, demanded: object, permThatFailed: IPermission, evidence: _n_6_t_2) -> SecurityException:...
    def __init__(self, message: str, inner: _n_0_t_2) -> SecurityException:...
    def __init__(self, message: str, type: _n_0_t_3, state: str) -> SecurityException:...
    def __init__(self, message: str, type: _n_0_t_3) -> SecurityException:...
    def __init__(self, message: str) -> SecurityException:...
    def __init__(self) -> SecurityException:...
class SecurityManager(object):
    @property
    def CheckExecutionRights(self) -> bool:"""CheckExecutionRights { get; set; } -> bool"""
    @property
    def SecurityEnabled(self) -> bool:"""SecurityEnabled { get; set; } -> bool"""
    @staticmethod
    def CurrentThreadRequiresSecurityContextCapture() -> bool:...
    @staticmethod
    def GetStandardSandbox(evidence: _n_6_t_2) -> PermissionSet:...
    @staticmethod
    def GetZoneAndOrigin(zone: _n_1_t_2, origin: _n_1_t_2):...
    @staticmethod
    def IsGranted(perm: IPermission) -> bool:...
    @staticmethod
    def LoadPolicyLevelFromFile(path: str, type: PolicyLevelType) -> _n_6_t_0:...
    @staticmethod
    def LoadPolicyLevelFromString(str: str, type: PolicyLevelType) -> _n_6_t_0:...
    @staticmethod
    def PolicyHierarchy() -> _n_1_t_3:...
    @staticmethod
    def ResolvePolicy(evidences: _n_0_t_4[_n_6_t_2]) -> PermissionSet:...
    @staticmethod
    def ResolvePolicy(evidence: _n_6_t_2) -> PermissionSet:...
    @staticmethod
    def ResolvePolicy(evidence: _n_6_t_2, reqdPset: PermissionSet, optPset: PermissionSet, denyPset: PermissionSet, denied: PermissionSet) -> PermissionSet:...
    @staticmethod
    def ResolvePolicyGroups(evidence: _n_6_t_2) -> _n_1_t_3:...
    @staticmethod
    def ResolveSystemPolicy(evidence: _n_6_t_2) -> PermissionSet:...
    @staticmethod
    def SavePolicy():...
    @staticmethod
    def SavePolicyLevel(level: _n_6_t_0):...
class SecurityRulesAttribute(_n_0_t_0, _n_3_t_0):
    @property
    def RuleSet(self) -> SecurityRuleSet:"""RuleSet { get; } -> SecurityRuleSet"""
    @property
    def SkipVerificationInFullTrust(self) -> bool:"""SkipVerificationInFullTrust { get; set; } -> bool"""
    def __init__(self, ruleSet: SecurityRuleSet) -> SecurityRulesAttribute:...
class SecurityRuleSet(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    Level1: int
    Level2: int
    _None: int
    value__: int
class SecuritySafeCriticalAttribute(_n_0_t_0, _n_3_t_0):
    def __init__(self) -> SecuritySafeCriticalAttribute:...
class SecurityState(object):
    def EnsureState(self):...
    def IsStateAvailable(self) -> bool:...
class SecurityTransparentAttribute(_n_0_t_0, _n_3_t_0):
    def __init__(self) -> SecurityTransparentAttribute:...
class SecurityTreatAsSafeAttribute(_n_0_t_0, _n_3_t_0):
    def __init__(self) -> SecurityTreatAsSafeAttribute:...
class SecurityZone(_n_0_t_5, _n_0_t_6, _n_0_t_7, _n_0_t_8):
    Internet: int
    Intranet: int
    MyComputer: int
    NoZone: int
    Trusted: int
    Untrusted: int
    value__: int
class SuppressUnmanagedCodeSecurityAttribute(_n_0_t_0, _n_3_t_0):
    def __init__(self) -> SuppressUnmanagedCodeSecurityAttribute:...
class UnverifiableCodeAttribute(_n_0_t_0, _n_3_t_0):
    def __init__(self) -> UnverifiableCodeAttribute:...
class VerificationException(_n_0_t_1, _n_4_t_0, _n_3_t_1):
    def __init__(self, message: str, innerException: _n_0_t_2) -> VerificationException:...
    def __init__(self, message: str) -> VerificationException:...
    def __init__(self) -> VerificationException:...
class XmlSyntaxException(_n_0_t_1, _n_4_t_0, _n_3_t_1):
    def __init__(self, lineNumber: int, message: str) -> XmlSyntaxException:...
    def __init__(self, lineNumber: int) -> XmlSyntaxException:...
    def __init__(self, message: str, inner: _n_0_t_2) -> XmlSyntaxException:...
    def __init__(self, message: str) -> XmlSyntaxException:...
    def __init__(self) -> XmlSyntaxException:...
