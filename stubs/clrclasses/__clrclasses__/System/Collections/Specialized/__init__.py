from __clrclasses__.System import ValueType as _n_0_t_0
from __clrclasses__.System import Array as _n_0_t_1
from __clrclasses__.System import Enum as _n_0_t_2
from __clrclasses__.System import IComparable as _n_0_t_3
from __clrclasses__.System import IFormattable as _n_0_t_4
from __clrclasses__.System import IConvertible as _n_0_t_5
from __clrclasses__.System import EventArgs as _n_0_t_6
from __clrclasses__.System import MulticastDelegate as _n_0_t_7
from __clrclasses__.System import ICloneable as _n_0_t_8
from __clrclasses__.System import IntPtr as _n_0_t_9
from __clrclasses__.System import IAsyncResult as _n_0_t_10
from __clrclasses__.System import AsyncCallback as _n_0_t_11
from __clrclasses__.System.Collections import Hashtable as _n_1_t_0
from __clrclasses__.System.Collections import IDictionary as _n_1_t_1
from __clrclasses__.System.Collections import SortedList as _n_1_t_2
from __clrclasses__.System.Collections import IComparer as _n_1_t_3
from __clrclasses__.System.Collections import ICollection as _n_1_t_4
from __clrclasses__.System.Collections import IHashCodeProvider as _n_1_t_5
from __clrclasses__.System.Collections import IEqualityComparer as _n_1_t_6
from __clrclasses__.System.Collections import IList as _n_1_t_7
from __clrclasses__.System.Collections import IEnumerable as _n_1_t_8
from __clrclasses__.System.Runtime.Serialization import ISerializable as _n_2_t_0
from __clrclasses__.System.Runtime.Serialization import IDeserializationCallback as _n_2_t_1
import typing
class BitVector32(_n_0_t_0, typing.Iterable[bool]):
    @property
    def Data(self) -> int:"""Data { get; } -> int"""
    @property
    def Item(self) -> bool:"""Item { get; set; } -> bool"""
    def __init__(self, value: BitVector32) -> BitVector32:...
    def __init__(self, data: int) -> BitVector32:...
    @staticmethod
    def CreateMask(previous: int) -> int:...
    @staticmethod
    def CreateMask() -> int:...
    @staticmethod
    def CreateSection(maxValue: int, previous: BitVector32.Section) -> BitVector32.Section:...
    @staticmethod
    def CreateSection(maxValue: int) -> BitVector32.Section:...
    class Section(_n_0_t_0):
        @property
        def Mask(self) -> int:"""Mask { get; } -> int"""
        @property
        def Offset(self) -> int:"""Offset { get; } -> int"""
class CollectionsUtil(object):
    def __init__(self) -> CollectionsUtil:...
    @staticmethod
    def CreateCaseInsensitiveHashtable(d: _n_1_t_1) -> _n_1_t_0:...
    @staticmethod
    def CreateCaseInsensitiveHashtable() -> _n_1_t_0:...
    @staticmethod
    def CreateCaseInsensitiveHashtable(capacity: int) -> _n_1_t_0:...
    @staticmethod
    def CreateCaseInsensitiveSortedList() -> _n_1_t_2:...
class HybridDictionary(_n_1_t_1):
    def __init__(self, initialSize: int, caseInsensitive: bool) -> HybridDictionary:...
    def __init__(self, caseInsensitive: bool) -> HybridDictionary:...
    def __init__(self, initialSize: int) -> HybridDictionary:...
    def __init__(self) -> HybridDictionary:...
class INotifyCollectionChanged():
    @property
    def CollectionChanged(self) -> NotifyCollectionChangedEventHandler:
        """CollectionChanged Event: NotifyCollectionChangedEventHandler"""
class IOrderedDictionary(_n_1_t_1):
    def Insert(self, index: int, key: object, value: object):...
    def RemoveAt(self, index: int):...
class ListDictionary(_n_1_t_1):
    def __init__(self, comparer: _n_1_t_3) -> ListDictionary:...
    def __init__(self) -> ListDictionary:...
class NameObjectCollectionBase(_n_1_t_4, _n_2_t_0, _n_2_t_1):
    @property
    def Keys(self) -> NameObjectCollectionBase.KeysCollection:"""Keys { get; } -> NameObjectCollectionBase.KeysCollection"""
    class KeysCollection(_n_1_t_4, typing.Iterable[str]):
        @property
        def Item(self) -> str:"""Item { get; } -> str"""
        def Get(self, index: int) -> str:...
class NameValueCollection(NameObjectCollectionBase, _n_1_t_4, _n_2_t_0, _n_2_t_1, typing.Iterable[str]):
    @property
    def AllKeys(self) -> _n_0_t_1[str]:"""AllKeys { get; } -> Array"""
    @property
    def Item(self) -> str:"""Item { get; set; } -> str"""
    def __init__(self, capacity: int, hashProvider: _n_1_t_5, comparer: _n_1_t_3) -> NameValueCollection:...
    def __init__(self, capacity: int, col: NameValueCollection) -> NameValueCollection:...
    def __init__(self, capacity: int, equalityComparer: _n_1_t_6) -> NameValueCollection:...
    def __init__(self, equalityComparer: _n_1_t_6) -> NameValueCollection:...
    def __init__(self, capacity: int) -> NameValueCollection:...
    def __init__(self, hashProvider: _n_1_t_5, comparer: _n_1_t_3) -> NameValueCollection:...
    def __init__(self, col: NameValueCollection) -> NameValueCollection:...
    def __init__(self) -> NameValueCollection:...
    def Add(self, name: str, value: str):...
    def Add(self, c: NameValueCollection):...
    def Clear(self):...
    def Get(self, index: int) -> str:...
    def Get(self, name: str) -> str:...
    def GetKey(self, index: int) -> str:...
    def GetValues(self, index: int) -> _n_0_t_1[str]:...
    def GetValues(self, name: str) -> _n_0_t_1[str]:...
    def HasKeys(self) -> bool:...
    def Remove(self, name: str):...
    def Set(self, name: str, value: str):...
class NotifyCollectionChangedAction(_n_0_t_2, _n_0_t_3, _n_0_t_4, _n_0_t_5):
    Add: int
    Move: int
    Remove: int
    Replace: int
    Reset: int
    value__: int
class NotifyCollectionChangedEventArgs(_n_0_t_6):
    @property
    def Action(self) -> NotifyCollectionChangedAction:"""Action { get; } -> NotifyCollectionChangedAction"""
    @property
    def NewItems(self) -> _n_1_t_7:"""NewItems { get; } -> IList"""
    @property
    def NewStartingIndex(self) -> int:"""NewStartingIndex { get; } -> int"""
    @property
    def OldItems(self) -> _n_1_t_7:"""OldItems { get; } -> IList"""
    @property
    def OldStartingIndex(self) -> int:"""OldStartingIndex { get; } -> int"""
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: _n_1_t_7, index: int, oldIndex: int) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: object, index: int, oldIndex: int) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, newItems: _n_1_t_7, oldItems: _n_1_t_7, startingIndex: int) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, newItems: _n_1_t_7, oldItems: _n_1_t_7) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, newItem: object, oldItem: object, index: int) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, newItem: object, oldItem: object) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: _n_1_t_7, startingIndex: int) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, changedItems: _n_1_t_7) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: object, index: int) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction, changedItem: object) -> NotifyCollectionChangedEventArgs:...
    def __init__(self, action: NotifyCollectionChangedAction) -> NotifyCollectionChangedEventArgs:...
class NotifyCollectionChangedEventHandler(_n_0_t_7, _n_0_t_8, _n_2_t_0):
    def __init__(self, object: object, method: _n_0_t_9) -> NotifyCollectionChangedEventHandler:...
    def BeginInvoke(self, sender: object, e: NotifyCollectionChangedEventArgs, callback: _n_0_t_11, object: object) -> _n_0_t_10:...
    def EndInvoke(self, result: _n_0_t_10):...
    def Invoke(self, sender: object, e: NotifyCollectionChangedEventArgs):...
class OrderedDictionary(IOrderedDictionary, _n_2_t_0, _n_2_t_1):
    def __init__(self, capacity: int, comparer: _n_1_t_6) -> OrderedDictionary:...
    def __init__(self, comparer: _n_1_t_6) -> OrderedDictionary:...
    def __init__(self, capacity: int) -> OrderedDictionary:...
    def __init__(self) -> OrderedDictionary:...
    def AsReadOnly(self) -> OrderedDictionary:...
class StringCollection(_n_1_t_7, typing.Iterable[str]):
    def __init__(self) -> StringCollection:...
    def AddRange(self, value: _n_0_t_1[str]):...
class StringDictionary(_n_1_t_8, typing.Iterable[str]):
    @property
    def Count(self) -> int:"""Count { get; } -> int"""
    @property
    def IsSynchronized(self) -> bool:"""IsSynchronized { get; } -> bool"""
    @property
    def Item(self) -> str:"""Item { get; set; } -> str"""
    @property
    def Keys(self) -> _n_1_t_4:"""Keys { get; } -> ICollection"""
    @property
    def SyncRoot(self) -> object:"""SyncRoot { get; } -> object"""
    @property
    def Values(self) -> _n_1_t_4:"""Values { get; } -> ICollection"""
    def __init__(self) -> StringDictionary:...
    def Add(self, key: str, value: str):...
    def Clear(self):...
    def ContainsKey(self, key: str) -> bool:...
    def ContainsValue(self, value: str) -> bool:...
    def CopyTo(self, array: _n_0_t_1, index: int):...
    def Remove(self, key: str):...
class StringEnumerator(object):
    @property
    def Current(self) -> str:"""Current { get; } -> str"""
    def MoveNext(self) -> bool:...
    def Reset(self):...
