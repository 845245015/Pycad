import __clrclasses__.System.Collections.Specialized as Specialized
import __clrclasses__.System.Collections.ObjectModel as ObjectModel
import __clrclasses__.System.Collections.Generic as Generic
import __clrclasses__.System.Collections.Concurrent as Concurrent
from __clrclasses__.System import ICloneable as _n_0_t_0
from __clrclasses__.System import Array as _n_0_t_1
from __clrclasses__.System import Type as _n_0_t_2
from __clrclasses__.System import Byte as _n_0_t_3
from __clrclasses__.System import ValueType as _n_0_t_4
from __clrclasses__.System.Collections.Generic import IEnumerable as _n_1_t_0
from __clrclasses__.System.Globalization import CultureInfo as _n_2_t_0
from __clrclasses__.System.Linq import ParallelQuery as _n_3_t_0
from __clrclasses__.System.Linq import IQueryable as _n_3_t_1
from __clrclasses__.System.Runtime.Serialization import ISerializable as _n_4_t_0
from __clrclasses__.System.Runtime.Serialization import IDeserializationCallback as _n_4_t_1
import typing
class ArrayList(IList, _n_0_t_0):
    @property
    def Capacity(self) -> int:"""Capacity { get; set; } -> int"""
    def __init__(self, c: ICollection) -> ArrayList:...
    def __init__(self, capacity: int) -> ArrayList:...
    def __init__(self) -> ArrayList:...
    @staticmethod
    def Adapter(list: IList) -> ArrayList:...
    def AddRange(self, c: ICollection):...
    def BinarySearch(self, value: object, comparer: IComparer) -> int:...
    def BinarySearch(self, value: object) -> int:...
    def BinarySearch(self, index: int, count: int, value: object, comparer: IComparer) -> int:...
    @staticmethod
    def FixedSize(list: ArrayList) -> ArrayList:...
    @staticmethod
    def FixedSize(list: IList) -> IList:...
    def GetRange(self, index: int, count: int) -> ArrayList:...
    def InsertRange(self, index: int, c: ICollection):...
    def LastIndexOf(self, value: object, startIndex: int, count: int) -> int:...
    def LastIndexOf(self, value: object, startIndex: int) -> int:...
    def LastIndexOf(self, value: object) -> int:...
    @staticmethod
    def ReadOnly(list: ArrayList) -> ArrayList:...
    @staticmethod
    def ReadOnly(list: IList) -> IList:...
    def RemoveRange(self, index: int, count: int):...
    @staticmethod
    def Repeat(value: object, count: int) -> ArrayList:...
    def Reverse(self, index: int, count: int):...
    def Reverse(self):...
    def SetRange(self, index: int, c: ICollection):...
    def Sort(self, index: int, count: int, comparer: IComparer):...
    def Sort(self, comparer: IComparer):...
    def Sort(self):...
    @staticmethod
    def Synchronized(list: ArrayList) -> ArrayList:...
    @staticmethod
    def Synchronized(list: IList) -> IList:...
    def ToArray(self, type: _n_0_t_2) -> _n_0_t_1:...
    def ToArray(self) -> _n_0_t_1[object]:...
    def TrimToSize(self):...
class BitArray(ICollection, _n_0_t_0, typing.Iterable[typing.Any]):
    @property
    def IsReadOnly(self) -> bool:"""IsReadOnly { get; } -> bool"""
    @property
    def Item(self) -> bool:"""Item { get; set; } -> bool"""
    @property
    def Length(self) -> int:"""Length { get; set; } -> int"""
    def __init__(self, bits: BitArray) -> BitArray:...
    def __init__(self, bytes: _n_0_t_1[_n_0_t_3]) -> BitArray:...
    def __init__(self, length: int, defaultValue: bool) -> BitArray:...
    def __init__(self, length: int) -> BitArray:...
    def And(self, value: BitArray) -> BitArray:...
    def Get(self, index: int) -> bool:...
    def Not(self) -> BitArray:...
    def Or(self, value: BitArray) -> BitArray:...
    def Set(self, index: int, value: bool):...
    def SetAll(self, value: bool):...
    def Xor(self, value: BitArray) -> BitArray:...
class CaseInsensitiveComparer(IComparer):
    @property
    def Default(self) -> CaseInsensitiveComparer:"""Default { get; } -> CaseInsensitiveComparer"""
    @property
    def DefaultInvariant(self) -> CaseInsensitiveComparer:"""DefaultInvariant { get; } -> CaseInsensitiveComparer"""
    def __init__(self, culture: _n_2_t_0) -> CaseInsensitiveComparer:...
    def __init__(self) -> CaseInsensitiveComparer:...
class CaseInsensitiveHashCodeProvider(IHashCodeProvider):
    @property
    def Default(self) -> CaseInsensitiveHashCodeProvider:"""Default { get; } -> CaseInsensitiveHashCodeProvider"""
    @property
    def DefaultInvariant(self) -> CaseInsensitiveHashCodeProvider:"""DefaultInvariant { get; } -> CaseInsensitiveHashCodeProvider"""
    def __init__(self, culture: _n_2_t_0) -> CaseInsensitiveHashCodeProvider:...
    def __init__(self) -> CaseInsensitiveHashCodeProvider:...
class CollectionBase(IList):
    @property
    def Capacity(self) -> int:"""Capacity { get; set; } -> int"""
class Comparer(IComparer, _n_4_t_0):
    Default: int
    DefaultInvariant: int
    def __init__(self, culture: _n_2_t_0) -> Comparer:...
class DictionaryBase(IDictionary):
    pass
class DictionaryEntry(_n_0_t_4):
    @property
    def Key(self) -> object:"""Key { get; set; } -> object"""
    @property
    def Value(self) -> object:"""Value { get; set; } -> object"""
    def __init__(self, key: object, value: object) -> DictionaryEntry:...
class Hashtable(IDictionary, _n_4_t_0, _n_4_t_1, _n_0_t_0):
    def __init__(self, d: IDictionary, loadFactor: float, equalityComparer: IEqualityComparer) -> Hashtable:...
    def __init__(self, d: IDictionary, loadFactor: float, hcp: IHashCodeProvider, comparer: IComparer) -> Hashtable:...
    def __init__(self, d: IDictionary, equalityComparer: IEqualityComparer) -> Hashtable:...
    def __init__(self, d: IDictionary, hcp: IHashCodeProvider, comparer: IComparer) -> Hashtable:...
    def __init__(self, d: IDictionary, loadFactor: float) -> Hashtable:...
    def __init__(self, d: IDictionary) -> Hashtable:...
    def __init__(self, capacity: int, equalityComparer: IEqualityComparer) -> Hashtable:...
    def __init__(self, capacity: int, hcp: IHashCodeProvider, comparer: IComparer) -> Hashtable:...
    def __init__(self, equalityComparer: IEqualityComparer) -> Hashtable:...
    def __init__(self, hcp: IHashCodeProvider, comparer: IComparer) -> Hashtable:...
    def __init__(self, capacity: int, loadFactor: float, equalityComparer: IEqualityComparer) -> Hashtable:...
    def __init__(self, capacity: int, loadFactor: float, hcp: IHashCodeProvider, comparer: IComparer) -> Hashtable:...
    def __init__(self, capacity: int, loadFactor: float) -> Hashtable:...
    def __init__(self, capacity: int) -> Hashtable:...
    def __init__(self) -> Hashtable:...
    def ContainsKey(self, key: object) -> bool:...
    def ContainsValue(self, value: object) -> bool:...
    @staticmethod
    def Synchronized(table: Hashtable) -> Hashtable:...
class ICollection(IEnumerable):
    @property
    def Count(self) -> int:"""Count { get; } -> int"""
    @property
    def IsSynchronized(self) -> bool:"""IsSynchronized { get; } -> bool"""
    @property
    def SyncRoot(self) -> object:"""SyncRoot { get; } -> object"""
    def CopyTo(self, array: _n_0_t_1, index: int):...
class IComparer():
    def Compare(self, x: object, y: object) -> int:...
class IDictionary(ICollection):
    @property
    def IsFixedSize(self) -> bool:"""IsFixedSize { get; } -> bool"""
    @property
    def IsReadOnly(self) -> bool:"""IsReadOnly { get; } -> bool"""
    @property
    def Item(self) -> object:"""Item { get; set; } -> object"""
    @property
    def Keys(self) -> ICollection:"""Keys { get; } -> ICollection"""
    @property
    def Values(self) -> ICollection:"""Values { get; } -> ICollection"""
    def Add(self, key: object, value: object):...
    def Clear(self):...
    def Contains(self, key: object) -> bool:...
    def Remove(self, key: object):...
class IDictionaryEnumerator(IEnumerator):
    @property
    def Entry(self) -> DictionaryEntry:"""Entry { get; } -> DictionaryEntry"""
    @property
    def Key(self) -> object:"""Key { get; } -> object"""
    @property
    def Value(self) -> object:"""Value { get; } -> object"""
class IEnumerable():
    def GetEnumerator(self) -> IEnumerator:...
    def AsParallel(self) -> _n_3_t_0:
        """Extension from: System.Linq.ParallelEnumerable"""
    def AsQueryable(self) -> _n_3_t_1:
        """Extension from: System.Linq.Queryable"""
    def Cast(self) -> _n_1_t_0[typing.Any]:
        """Extension from: System.Linq.Enumerable"""
    def OfType(self) -> _n_1_t_0[typing.Any]:
        """Extension from: System.Linq.Enumerable"""
class IEnumerator():
    @property
    def Current(self) -> object:"""Current { get; } -> object"""
    def MoveNext(self) -> bool:...
    def Reset(self):...
class IEqualityComparer():
    def Equals(self, x: object, y: object) -> bool:...
    def GetHashCode(self, obj: object) -> int:...
class IHashCodeProvider():
    def GetHashCode(self, obj: object) -> int:...
class IList(ICollection):
    @property
    def IsFixedSize(self) -> bool:"""IsFixedSize { get; } -> bool"""
    @property
    def IsReadOnly(self) -> bool:"""IsReadOnly { get; } -> bool"""
    @property
    def Item(self) -> object:"""Item { get; set; } -> object"""
    def Add(self, value: object) -> int:...
    def Clear(self):...
    def Contains(self, value: object) -> bool:...
    def IndexOf(self, value: object) -> int:...
    def Insert(self, index: int, value: object):...
    def Remove(self, value: object):...
    def RemoveAt(self, index: int):...
class IStructuralComparable():
    def CompareTo(self, other: object, comparer: IComparer) -> int:...
class IStructuralEquatable():
    def Equals(self, other: object, comparer: IEqualityComparer) -> bool:...
    def GetHashCode(self, comparer: IEqualityComparer) -> int:...
class Queue(ICollection, _n_0_t_0):
    def __init__(self, col: ICollection) -> Queue:...
    def __init__(self, capacity: int, growFactor: float) -> Queue:...
    def __init__(self, capacity: int) -> Queue:...
    def __init__(self) -> Queue:...
    def Clear(self):...
    def Contains(self, obj: object) -> bool:...
    def Dequeue(self) -> object:...
    def Enqueue(self, obj: object):...
    def Peek(self) -> object:...
    @staticmethod
    def Synchronized(queue: Queue) -> Queue:...
    def ToArray(self) -> _n_0_t_1[object]:...
    def TrimToSize(self):...
class ReadOnlyCollectionBase(ICollection):
    pass
class SortedList(IDictionary, _n_0_t_0):
    @property
    def Capacity(self) -> int:"""Capacity { get; set; } -> int"""
    def __init__(self, d: IDictionary, comparer: IComparer) -> SortedList:...
    def __init__(self, d: IDictionary) -> SortedList:...
    def __init__(self, comparer: IComparer, capacity: int) -> SortedList:...
    def __init__(self, comparer: IComparer) -> SortedList:...
    def __init__(self, initialCapacity: int) -> SortedList:...
    def __init__(self) -> SortedList:...
    def ContainsKey(self, key: object) -> bool:...
    def ContainsValue(self, value: object) -> bool:...
    def GetByIndex(self, index: int) -> object:...
    def GetKey(self, index: int) -> object:...
    def GetKeyList(self) -> IList:...
    def GetValueList(self) -> IList:...
    def IndexOfKey(self, key: object) -> int:...
    def IndexOfValue(self, value: object) -> int:...
    def RemoveAt(self, index: int):...
    def SetByIndex(self, index: int, value: object):...
    @staticmethod
    def Synchronized(list: SortedList) -> SortedList:...
    def TrimToSize(self):...
class Stack(ICollection, _n_0_t_0):
    def __init__(self, col: ICollection) -> Stack:...
    def __init__(self, initialCapacity: int) -> Stack:...
    def __init__(self) -> Stack:...
    def Clear(self):...
    def Contains(self, obj: object) -> bool:...
    def Peek(self) -> object:...
    def Pop(self) -> object:...
    def Push(self, obj: object):...
    @staticmethod
    def Synchronized(stack: Stack) -> Stack:...
    def ToArray(self) -> _n_0_t_1[object]:...
class StructuralComparisons(object):
    @property
    def StructuralComparer(self) -> IComparer:"""StructuralComparer { get; } -> IComparer"""
    @property
    def StructuralEqualityComparer(self) -> IEqualityComparer:"""StructuralEqualityComparer { get; } -> IEqualityComparer"""
