import __clrclasses__.System.Threading.Tasks as Tasks
from __clrclasses__.Microsoft.Win32.SafeHandles import SafeWaitHandle as _n_0_t_0
from __clrclasses__.System import SystemException as _n_1_t_0
from __clrclasses__.System import Exception as _n_1_t_1
from __clrclasses__.System import Enum as _n_1_t_2
from __clrclasses__.System import IComparable as _n_1_t_3
from __clrclasses__.System import IFormattable as _n_1_t_4
from __clrclasses__.System import IConvertible as _n_1_t_5
from __clrclasses__.System import ValueType as _n_1_t_6
from __clrclasses__.System import IDisposable as _n_1_t_7
from __clrclasses__.System import Action as _n_1_t_8
from __clrclasses__.System import TimeSpan as _n_1_t_9
from __clrclasses__.System import IEquatable as _n_1_t_10
from __clrclasses__.System import Array as _n_1_t_11
from __clrclasses__.System import MulticastDelegate as _n_1_t_12
from __clrclasses__.System import ICloneable as _n_1_t_13
from __clrclasses__.System import IntPtr as _n_1_t_14
from __clrclasses__.System import IAsyncResult as _n_1_t_15
from __clrclasses__.System import AsyncCallback as _n_1_t_16
from __clrclasses__.System import UInt32 as _n_1_t_17
from __clrclasses__.System import Func as _n_1_t_18
from __clrclasses__.System import MarshalByRefObject as _n_1_t_19
from __clrclasses__.System import LocalDataStoreSlot as _n_1_t_20
from __clrclasses__.System import AppDomain as _n_1_t_21
from __clrclasses__.System import UInt64 as _n_1_t_22
from __clrclasses__.System import UIntPtr as _n_1_t_23
from __clrclasses__.System import UInt16 as _n_1_t_24
from __clrclasses__.System import SByte as _n_1_t_25
from __clrclasses__.System import Byte as _n_1_t_26
from __clrclasses__.System import EventArgs as _n_1_t_27
from __clrclasses__.System import ApplicationException as _n_1_t_28
from __clrclasses__.System.Collections.Generic import IList as _n_2_t_0
from __clrclasses__.System.Globalization import CultureInfo as _n_3_t_0
from __clrclasses__.System.Runtime.ConstrainedExecution import CriticalFinalizerObject as _n_4_t_0
from __clrclasses__.System.Runtime.InteropServices import _Exception as _n_5_t_0
from __clrclasses__.System.Runtime.InteropServices import _Thread as _n_5_t_1
from __clrclasses__.System.Runtime.InteropServices import SafeHandle as _n_5_t_2
from __clrclasses__.System.Runtime.Remoting.Contexts import Context as _n_6_t_0
from __clrclasses__.System.Runtime.Serialization import ISerializable as _n_7_t_0
from __clrclasses__.System.Security.AccessControl import EventWaitHandleSecurity as _n_8_t_0
from __clrclasses__.System.Security.AccessControl import EventWaitHandleRights as _n_8_t_1
from __clrclasses__.System.Security.AccessControl import MutexSecurity as _n_8_t_2
from __clrclasses__.System.Security.AccessControl import MutexRights as _n_8_t_3
from __clrclasses__.System.Security.AccessControl import SemaphoreSecurity as _n_8_t_4
from __clrclasses__.System.Security.AccessControl import SemaphoreRights as _n_8_t_5
from __clrclasses__.System.Security.Principal import IPrincipal as _n_9_t_0
from __clrclasses__.System.Threading.Tasks import Task as _n_10_t_0
import typing
T = typing.TypeVar('T')
class AbandonedMutexException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    @property
    def Mutex(self) -> Mutex:"""Mutex { get; } -> Mutex"""
    @property
    def MutexIndex(self) -> int:"""MutexIndex { get; } -> int"""
    def __init__(self, message: str, inner: _n_1_t_1, location: int, handle: WaitHandle) -> AbandonedMutexException:...
    def __init__(self, message: str, location: int, handle: WaitHandle) -> AbandonedMutexException:...
    def __init__(self, location: int, handle: WaitHandle) -> AbandonedMutexException:...
    def __init__(self, message: str, inner: _n_1_t_1) -> AbandonedMutexException:...
    def __init__(self, message: str) -> AbandonedMutexException:...
    def __init__(self) -> AbandonedMutexException:...
class ApartmentState(_n_1_t_2, _n_1_t_3, _n_1_t_4, _n_1_t_5):
    MTA: int
    STA: int
    Unknown: int
    value__: int
class AsyncFlowControl(_n_1_t_6, _n_1_t_7):
    def Undo(self):...
class AsyncLocal(IAsyncLocal, typing.Generic[T]):
    @property
    def Value(self) -> T:"""Value { get; set; } -> T"""
    def __init__(self, valueChangedHandler: _n_1_t_8[AsyncLocalValueChangedArgs[T]]) -> AsyncLocal:...
    def __init__(self) -> AsyncLocal:...
class AsyncLocalValueChangedArgs(_n_1_t_6, typing.Generic[T]):
    @property
    def CurrentValue(self) -> T:"""CurrentValue { get; set; } -> T"""
    @property
    def PreviousValue(self) -> T:"""PreviousValue { get; set; } -> T"""
    @property
    def ThreadContextChanged(self) -> bool:"""ThreadContextChanged { get; set; } -> bool"""
class AutoResetEvent(EventWaitHandle, _n_1_t_7):
    def __init__(self, initialState: bool) -> AutoResetEvent:...
class Barrier(_n_1_t_7):
    @property
    def CurrentPhaseNumber(self) -> int:"""CurrentPhaseNumber { get; set; } -> int"""
    @property
    def ParticipantCount(self) -> int:"""ParticipantCount { get; } -> int"""
    @property
    def ParticipantsRemaining(self) -> int:"""ParticipantsRemaining { get; } -> int"""
    def __init__(self, participantCount: int, postPhaseAction: _n_1_t_8[Barrier]) -> Barrier:...
    def __init__(self, participantCount: int) -> Barrier:...
    def AddParticipant(self) -> int:...
    def AddParticipants(self, participantCount: int) -> int:...
    def RemoveParticipant(self):...
    def RemoveParticipants(self, participantCount: int):...
    def SignalAndWait(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> bool:...
    def SignalAndWait(self, millisecondsTimeout: int) -> bool:...
    def SignalAndWait(self, timeout: _n_1_t_9, cancellationToken: CancellationToken) -> bool:...
    def SignalAndWait(self, timeout: _n_1_t_9) -> bool:...
    def SignalAndWait(self, cancellationToken: CancellationToken):...
    def SignalAndWait(self):...
class BarrierPostPhaseException(_n_1_t_1, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> BarrierPostPhaseException:...
    def __init__(self, message: str) -> BarrierPostPhaseException:...
    def __init__(self, innerException: _n_1_t_1) -> BarrierPostPhaseException:...
    def __init__(self) -> BarrierPostPhaseException:...
class CancellationToken(_n_1_t_6):
    @property
    def CanBeCanceled(self) -> bool:"""CanBeCanceled { get; } -> bool"""
    @property
    def IsCancellationRequested(self) -> bool:"""IsCancellationRequested { get; } -> bool"""
    @property
    def None(self) -> CancellationToken:"""None { get; } -> CancellationToken"""
    @property
    def WaitHandle(self) -> WaitHandle:"""WaitHandle { get; } -> WaitHandle"""
    def __init__(self, canceled: bool) -> CancellationToken:...
    def Register(self, callback: _n_1_t_8[object], state: object, useSynchronizationContext: bool) -> CancellationTokenRegistration:...
    def Register(self, callback: _n_1_t_8[object], state: object) -> CancellationTokenRegistration:...
    def Register(self, callback: _n_1_t_8, useSynchronizationContext: bool) -> CancellationTokenRegistration:...
    def Register(self, callback: _n_1_t_8) -> CancellationTokenRegistration:...
    def ThrowIfCancellationRequested(self):...
class CancellationTokenRegistration(_n_1_t_6, _n_1_t_10[CancellationTokenRegistration], _n_1_t_7):
    pass
class CancellationTokenSource(_n_1_t_7):
    @property
    def IsCancellationRequested(self) -> bool:"""IsCancellationRequested { get; } -> bool"""
    @property
    def Token(self) -> CancellationToken:"""Token { get; } -> CancellationToken"""
    def __init__(self, millisecondsDelay: int) -> CancellationTokenSource:...
    def __init__(self, delay: _n_1_t_9) -> CancellationTokenSource:...
    def __init__(self) -> CancellationTokenSource:...
    def Cancel(self):...
    def Cancel(self, throwOnFirstException: bool):...
    def CancelAfter(self, millisecondsDelay: int):...
    def CancelAfter(self, delay: _n_1_t_9):...
    @staticmethod
    def CreateLinkedTokenSource(tokens: _n_1_t_11[CancellationToken]) -> CancellationTokenSource:...
    @staticmethod
    def CreateLinkedTokenSource(token1: CancellationToken, token2: CancellationToken) -> CancellationTokenSource:...
class CompressedStack(_n_7_t_0):
    @staticmethod
    def Capture() -> CompressedStack:...
    def CreateCopy(self) -> CompressedStack:...
    @staticmethod
    def GetCompressedStack() -> CompressedStack:...
    @staticmethod
    def Run(compressedStack: CompressedStack, callback: ContextCallback, state: object):...
class ContextCallback(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> ContextCallback:...
    def BeginInvoke(self, state: object, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, state: object):...
class CountdownEvent(_n_1_t_7):
    @property
    def CurrentCount(self) -> int:"""CurrentCount { get; } -> int"""
    @property
    def InitialCount(self) -> int:"""InitialCount { get; } -> int"""
    @property
    def IsSet(self) -> bool:"""IsSet { get; } -> bool"""
    @property
    def WaitHandle(self) -> WaitHandle:"""WaitHandle { get; } -> WaitHandle"""
    def __init__(self, initialCount: int) -> CountdownEvent:...
    def AddCount(self, signalCount: int):...
    def AddCount(self):...
    def Reset(self, count: int):...
    def Reset(self):...
    def Signal(self, signalCount: int) -> bool:...
    def Signal(self) -> bool:...
    def TryAddCount(self, signalCount: int) -> bool:...
    def TryAddCount(self) -> bool:...
    def Wait(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> bool:...
    def Wait(self, millisecondsTimeout: int) -> bool:...
    def Wait(self, timeout: _n_1_t_9, cancellationToken: CancellationToken) -> bool:...
    def Wait(self, timeout: _n_1_t_9) -> bool:...
    def Wait(self, cancellationToken: CancellationToken):...
    def Wait(self):...
class EventResetMode(_n_1_t_2, _n_1_t_3, _n_1_t_4, _n_1_t_5):
    AutoReset: int
    ManualReset: int
    value__: int
class EventWaitHandle(WaitHandle, _n_1_t_7):
    def __init__(self, initialState: bool, mode: EventResetMode, name: str, createdNew: bool, eventSecurity: _n_8_t_0) -> EventWaitHandle:...
    def __init__(self, initialState: bool, mode: EventResetMode, name: str, createdNew: bool) -> EventWaitHandle:...
    def __init__(self, initialState: bool, mode: EventResetMode, name: str) -> EventWaitHandle:...
    def __init__(self, initialState: bool, mode: EventResetMode) -> EventWaitHandle:...
    def GetAccessControl(self) -> _n_8_t_0:...
    @staticmethod
    def OpenExisting(name: str, rights: _n_8_t_1) -> EventWaitHandle:...
    @staticmethod
    def OpenExisting(name: str) -> EventWaitHandle:...
    def Reset(self) -> bool:...
    def Set(self) -> bool:...
    def SetAccessControl(self, eventSecurity: _n_8_t_0):...
    @staticmethod
    def TryOpenExisting(name: str, rights: _n_8_t_1, result: EventWaitHandle) -> bool:...
    @staticmethod
    def TryOpenExisting(name: str, result: EventWaitHandle) -> bool:...
class ExecutionContext(_n_1_t_7, _n_7_t_0):
    @staticmethod
    def Capture() -> ExecutionContext:...
    def CreateCopy(self) -> ExecutionContext:...
    @staticmethod
    def IsFlowSuppressed() -> bool:...
    @staticmethod
    def RestoreFlow():...
    @staticmethod
    def Run(executionContext: ExecutionContext, callback: ContextCallback, state: object):...
    @staticmethod
    def SuppressFlow() -> AsyncFlowControl:...
class HostExecutionContext(_n_1_t_7):
    def __init__(self, state: object) -> HostExecutionContext:...
    def __init__(self) -> HostExecutionContext:...
    def CreateCopy(self) -> HostExecutionContext:...
class HostExecutionContextManager(object):
    def __init__(self) -> HostExecutionContextManager:...
    def Capture(self) -> HostExecutionContext:...
    def Revert(self, previousState: object):...
    def SetHostExecutionContext(self, hostExecutionContext: HostExecutionContext) -> object:...
class Interlocked(object):
    @staticmethod
    def Add(location1: int, value: int) -> int:...
    @staticmethod
    def CompareExchange(location1: object, value: typing.Any, comparand: typing.Any) -> typing.Any:...
    @staticmethod
    def CompareExchange(location1: _n_1_t_14, value: _n_1_t_14, comparand: _n_1_t_14) -> _n_1_t_14:...
    @staticmethod
    def CompareExchange(location1: object, value: object, comparand: object) -> object:...
    @staticmethod
    def CompareExchange(location1: float, value: float, comparand: float) -> float:...
    @staticmethod
    def CompareExchange(location1: int, value: int, comparand: int) -> int:...
    @staticmethod
    def Decrement(location: int) -> int:...
    @staticmethod
    def Exchange(location1: object, value: typing.Any) -> typing.Any:...
    @staticmethod
    def Exchange(location1: _n_1_t_14, value: _n_1_t_14) -> _n_1_t_14:...
    @staticmethod
    def Exchange(location1: object, value: object) -> object:...
    @staticmethod
    def Exchange(location1: float, value: float) -> float:...
    @staticmethod
    def Exchange(location1: int, value: int) -> int:...
    @staticmethod
    def Increment(location: int) -> int:...
    @staticmethod
    def MemoryBarrier():...
    @staticmethod
    def Read(location: int) -> int:...
class IOCompletionCallback(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> IOCompletionCallback:...
    def BeginInvoke(self, errorCode: _n_1_t_17, numBytes: _n_1_t_17, pOVERLAP: NativeOverlapped, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, errorCode: _n_1_t_17, numBytes: _n_1_t_17, pOVERLAP: NativeOverlapped):...
class LazyInitializer(object):
    @staticmethod
    def EnsureInitialized(target: object, initialized: bool, syncLock: object, valueFactory: _n_1_t_18[typing.Any]) -> typing.Any:...
    @staticmethod
    def EnsureInitialized(target: object, initialized: bool, syncLock: object) -> typing.Any:...
    @staticmethod
    def EnsureInitialized(target: object) -> typing.Any:...
    @staticmethod
    def EnsureInitialized(target: object, valueFactory: _n_1_t_18[typing.Any]) -> typing.Any:...
class LazyThreadSafetyMode(_n_1_t_2, _n_1_t_3, _n_1_t_4, _n_1_t_5):
    ExecutionAndPublication: int
    _None: int
    PublicationOnly: int
    value__: int
class LockCookie(_n_1_t_6):
    pass
class LockRecursionException(_n_1_t_1, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> LockRecursionException:...
    def __init__(self, message: str) -> LockRecursionException:...
    def __init__(self) -> LockRecursionException:...
class LockRecursionPolicy(_n_1_t_2, _n_1_t_3, _n_1_t_4, _n_1_t_5):
    NoRecursion: int
    SupportsRecursion: int
    value__: int
class ManualResetEvent(EventWaitHandle, _n_1_t_7):
    def __init__(self, initialState: bool) -> ManualResetEvent:...
class ManualResetEventSlim(_n_1_t_7):
    @property
    def IsSet(self) -> bool:"""IsSet { get; set; } -> bool"""
    @property
    def SpinCount(self) -> int:"""SpinCount { get; set; } -> int"""
    @property
    def WaitHandle(self) -> WaitHandle:"""WaitHandle { get; } -> WaitHandle"""
    def __init__(self, initialState: bool, spinCount: int) -> ManualResetEventSlim:...
    def __init__(self, initialState: bool) -> ManualResetEventSlim:...
    def __init__(self) -> ManualResetEventSlim:...
    def Reset(self):...
    def Set(self):...
    def Wait(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> bool:...
    def Wait(self, millisecondsTimeout: int) -> bool:...
    def Wait(self, timeout: _n_1_t_9, cancellationToken: CancellationToken) -> bool:...
    def Wait(self, timeout: _n_1_t_9) -> bool:...
    def Wait(self, cancellationToken: CancellationToken):...
    def Wait(self):...
class Monitor(object):
    @staticmethod
    def Enter(obj: object, lockTaken: bool):...
    @staticmethod
    def Enter(obj: object):...
    @staticmethod
    def Exit(obj: object):...
    @staticmethod
    def IsEntered(obj: object) -> bool:...
    @staticmethod
    def Pulse(obj: object):...
    @staticmethod
    def PulseAll(obj: object):...
    @staticmethod
    def TryEnter(obj: object, timeout: _n_1_t_9, lockTaken: bool):...
    @staticmethod
    def TryEnter(obj: object, millisecondsTimeout: int, lockTaken: bool):...
    @staticmethod
    def TryEnter(obj: object, timeout: _n_1_t_9) -> bool:...
    @staticmethod
    def TryEnter(obj: object, millisecondsTimeout: int) -> bool:...
    @staticmethod
    def TryEnter(obj: object, lockTaken: bool):...
    @staticmethod
    def TryEnter(obj: object) -> bool:...
    @staticmethod
    def Wait(obj: object) -> bool:...
    @staticmethod
    def Wait(obj: object, timeout: _n_1_t_9) -> bool:...
    @staticmethod
    def Wait(obj: object, millisecondsTimeout: int) -> bool:...
    @staticmethod
    def Wait(obj: object, timeout: _n_1_t_9, exitContext: bool) -> bool:...
    @staticmethod
    def Wait(obj: object, millisecondsTimeout: int, exitContext: bool) -> bool:...
class Mutex(WaitHandle, _n_1_t_7):
    def __init__(self) -> Mutex:...
    def __init__(self, initiallyOwned: bool) -> Mutex:...
    def __init__(self, initiallyOwned: bool, name: str) -> Mutex:...
    def __init__(self, initiallyOwned: bool, name: str, createdNew: bool, mutexSecurity: _n_8_t_2) -> Mutex:...
    def __init__(self, initiallyOwned: bool, name: str, createdNew: bool) -> Mutex:...
    def GetAccessControl(self) -> _n_8_t_2:...
    @staticmethod
    def OpenExisting(name: str, rights: _n_8_t_3) -> Mutex:...
    @staticmethod
    def OpenExisting(name: str) -> Mutex:...
    def ReleaseMutex(self):...
    def SetAccessControl(self, mutexSecurity: _n_8_t_2):...
    @staticmethod
    def TryOpenExisting(name: str, rights: _n_8_t_3, result: Mutex) -> bool:...
    @staticmethod
    def TryOpenExisting(name: str, result: Mutex) -> bool:...
class NativeOverlapped(_n_1_t_6):
    EventHandle: int
    InternalHigh: int
    InternalLow: int
    OffsetHigh: int
    OffsetLow: int
class Overlapped(object):
    @property
    def AsyncResult(self) -> _n_1_t_15:"""AsyncResult { get; set; } -> IAsyncResult"""
    @property
    def EventHandle(self) -> int:"""EventHandle { get; set; } -> int"""
    @property
    def EventHandleIntPtr(self) -> _n_1_t_14:"""EventHandleIntPtr { get; set; } -> IntPtr"""
    @property
    def OffsetHigh(self) -> int:"""OffsetHigh { get; set; } -> int"""
    @property
    def OffsetLow(self) -> int:"""OffsetLow { get; set; } -> int"""
    def __init__(self, offsetLo: int, offsetHi: int, hEvent: int, ar: _n_1_t_15) -> Overlapped:...
    def __init__(self, offsetLo: int, offsetHi: int, hEvent: _n_1_t_14, ar: _n_1_t_15) -> Overlapped:...
    def __init__(self) -> Overlapped:...
    @staticmethod
    def Free(nativeOverlappedPtr: NativeOverlapped):...
    def Pack(self, iocb: IOCompletionCallback) -> NativeOverlapped:...
    def Pack(self, iocb: IOCompletionCallback, userData: object) -> NativeOverlapped:...
    @staticmethod
    def Unpack(nativeOverlappedPtr: NativeOverlapped) -> Overlapped:...
    def UnsafePack(self, iocb: IOCompletionCallback) -> NativeOverlapped:...
    def UnsafePack(self, iocb: IOCompletionCallback, userData: object) -> NativeOverlapped:...
class ParameterizedThreadStart(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> ParameterizedThreadStart:...
    def BeginInvoke(self, obj: object, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, obj: object):...
class PreAllocatedOverlapped(_n_1_t_7, IDeferredDisposable):
    def __init__(self, callback: IOCompletionCallback, state: object, pinData: object) -> PreAllocatedOverlapped:...
class ReaderWriterLock(_n_4_t_0):
    @property
    def IsReaderLockHeld(self) -> bool:"""IsReaderLockHeld { get; } -> bool"""
    @property
    def IsWriterLockHeld(self) -> bool:"""IsWriterLockHeld { get; } -> bool"""
    @property
    def WriterSeqNum(self) -> int:"""WriterSeqNum { get; } -> int"""
    def __init__(self) -> ReaderWriterLock:...
    def AcquireReaderLock(self, timeout: _n_1_t_9):...
    def AcquireReaderLock(self, millisecondsTimeout: int):...
    def AcquireWriterLock(self, timeout: _n_1_t_9):...
    def AcquireWriterLock(self, millisecondsTimeout: int):...
    def AnyWritersSince(self, seqNum: int) -> bool:...
    def DowngradeFromWriterLock(self, lockCookie: LockCookie):...
    def ReleaseLock(self) -> LockCookie:...
    def ReleaseReaderLock(self):...
    def ReleaseWriterLock(self):...
    def RestoreLock(self, lockCookie: LockCookie):...
    def UpgradeToWriterLock(self, timeout: _n_1_t_9) -> LockCookie:...
    def UpgradeToWriterLock(self, millisecondsTimeout: int) -> LockCookie:...
class ReaderWriterLockSlim(_n_1_t_7):
    @property
    def CurrentReadCount(self) -> int:"""CurrentReadCount { get; } -> int"""
    @property
    def IsReadLockHeld(self) -> bool:"""IsReadLockHeld { get; } -> bool"""
    @property
    def IsUpgradeableReadLockHeld(self) -> bool:"""IsUpgradeableReadLockHeld { get; } -> bool"""
    @property
    def IsWriteLockHeld(self) -> bool:"""IsWriteLockHeld { get; } -> bool"""
    @property
    def RecursionPolicy(self) -> LockRecursionPolicy:"""RecursionPolicy { get; } -> LockRecursionPolicy"""
    @property
    def RecursiveReadCount(self) -> int:"""RecursiveReadCount { get; } -> int"""
    @property
    def RecursiveUpgradeCount(self) -> int:"""RecursiveUpgradeCount { get; } -> int"""
    @property
    def RecursiveWriteCount(self) -> int:"""RecursiveWriteCount { get; } -> int"""
    @property
    def WaitingReadCount(self) -> int:"""WaitingReadCount { get; } -> int"""
    @property
    def WaitingUpgradeCount(self) -> int:"""WaitingUpgradeCount { get; } -> int"""
    @property
    def WaitingWriteCount(self) -> int:"""WaitingWriteCount { get; } -> int"""
    def __init__(self) -> ReaderWriterLockSlim:...
    def __init__(self, recursionPolicy: LockRecursionPolicy) -> ReaderWriterLockSlim:...
    def EnterReadLock(self):...
    def EnterUpgradeableReadLock(self):...
    def EnterWriteLock(self):...
    def ExitReadLock(self):...
    def ExitUpgradeableReadLock(self):...
    def ExitWriteLock(self):...
    def TryEnterReadLock(self, timeout: _n_1_t_9) -> bool:...
    def TryEnterReadLock(self, millisecondsTimeout: int) -> bool:...
    def TryEnterUpgradeableReadLock(self, timeout: _n_1_t_9) -> bool:...
    def TryEnterUpgradeableReadLock(self, millisecondsTimeout: int) -> bool:...
    def TryEnterWriteLock(self, timeout: _n_1_t_9) -> bool:...
    def TryEnterWriteLock(self, millisecondsTimeout: int) -> bool:...
class RegisteredWaitHandle(_n_1_t_19):
    def Unregister(self, waitObject: WaitHandle) -> bool:...
class Semaphore(WaitHandle, _n_1_t_7):
    def __init__(self, initialCount: int, maximumCount: int, name: str, createdNew: bool, semaphoreSecurity: _n_8_t_4) -> Semaphore:...
    def __init__(self, initialCount: int, maximumCount: int, name: str, createdNew: bool) -> Semaphore:...
    def __init__(self, initialCount: int, maximumCount: int, name: str) -> Semaphore:...
    def __init__(self, initialCount: int, maximumCount: int) -> Semaphore:...
    def GetAccessControl(self) -> _n_8_t_4:...
    @staticmethod
    def OpenExisting(name: str, rights: _n_8_t_5) -> Semaphore:...
    @staticmethod
    def OpenExisting(name: str) -> Semaphore:...
    def Release(self, releaseCount: int) -> int:...
    def Release(self) -> int:...
    def SetAccessControl(self, semaphoreSecurity: _n_8_t_4):...
    @staticmethod
    def TryOpenExisting(name: str, rights: _n_8_t_5, result: Semaphore) -> bool:...
    @staticmethod
    def TryOpenExisting(name: str, result: Semaphore) -> bool:...
class SemaphoreFullException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> SemaphoreFullException:...
    def __init__(self, message: str) -> SemaphoreFullException:...
    def __init__(self) -> SemaphoreFullException:...
class SemaphoreSlim(_n_1_t_7):
    @property
    def AvailableWaitHandle(self) -> WaitHandle:"""AvailableWaitHandle { get; } -> WaitHandle"""
    @property
    def CurrentCount(self) -> int:"""CurrentCount { get; } -> int"""
    def __init__(self, initialCount: int) -> SemaphoreSlim:...
    def __init__(self, initialCount: int, maxCount: int) -> SemaphoreSlim:...
    def Release(self, releaseCount: int) -> int:...
    def Release(self) -> int:...
    def Wait(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> bool:...
    def Wait(self, millisecondsTimeout: int) -> bool:...
    def Wait(self, timeout: _n_1_t_9, cancellationToken: CancellationToken) -> bool:...
    def Wait(self, timeout: _n_1_t_9) -> bool:...
    def Wait(self, cancellationToken: CancellationToken):...
    def Wait(self):...
    def WaitAsync(self, millisecondsTimeout: int, cancellationToken: CancellationToken) -> _n_10_t_0[bool]:...
    def WaitAsync(self, timeout: _n_1_t_9, cancellationToken: CancellationToken) -> _n_10_t_0[bool]:...
    def WaitAsync(self, timeout: _n_1_t_9) -> _n_10_t_0[bool]:...
    def WaitAsync(self, millisecondsTimeout: int) -> _n_10_t_0[bool]:...
    def WaitAsync(self, cancellationToken: CancellationToken) -> _n_10_t_0:...
    def WaitAsync(self) -> _n_10_t_0:...
class SendOrPostCallback(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> SendOrPostCallback:...
    def BeginInvoke(self, state: object, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, state: object):...
class SpinLock(_n_1_t_6):
    @property
    def IsHeld(self) -> bool:"""IsHeld { get; } -> bool"""
    @property
    def IsHeldByCurrentThread(self) -> bool:"""IsHeldByCurrentThread { get; } -> bool"""
    @property
    def IsThreadOwnerTrackingEnabled(self) -> bool:"""IsThreadOwnerTrackingEnabled { get; } -> bool"""
    def __init__(self, enableThreadOwnerTracking: bool) -> SpinLock:...
    def Enter(self, lockTaken: bool):...
    def Exit(self, useMemoryBarrier: bool):...
    def Exit(self):...
    def TryEnter(self, millisecondsTimeout: int, lockTaken: bool):...
    def TryEnter(self, timeout: _n_1_t_9, lockTaken: bool):...
    def TryEnter(self, lockTaken: bool):...
class SpinWait(_n_1_t_6):
    @property
    def Count(self) -> int:"""Count { get; } -> int"""
    @property
    def NextSpinWillYield(self) -> bool:"""NextSpinWillYield { get; } -> bool"""
    def Reset(self):...
    def SpinOnce(self):...
    @staticmethod
    def SpinUntil(condition: _n_1_t_18[bool], millisecondsTimeout: int) -> bool:...
    @staticmethod
    def SpinUntil(condition: _n_1_t_18[bool], timeout: _n_1_t_9) -> bool:...
    @staticmethod
    def SpinUntil(condition: _n_1_t_18[bool]):...
class SynchronizationContext(object):
    @property
    def Current(self) -> SynchronizationContext:"""Current { get; } -> SynchronizationContext"""
    def __init__(self) -> SynchronizationContext:...
    def CreateCopy(self) -> SynchronizationContext:...
    def IsWaitNotificationRequired(self) -> bool:...
    def OperationCompleted(self):...
    def OperationStarted(self):...
    def Post(self, d: SendOrPostCallback, state: object):...
    def Send(self, d: SendOrPostCallback, state: object):...
    @staticmethod
    def SetSynchronizationContext(syncContext: SynchronizationContext):...
    def Wait(self, waitHandles: _n_1_t_11[_n_1_t_14], waitAll: bool, millisecondsTimeout: int) -> int:...
class SynchronizationLockException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> SynchronizationLockException:...
    def __init__(self, message: str) -> SynchronizationLockException:...
    def __init__(self) -> SynchronizationLockException:...
class Thread(_n_4_t_0, _n_5_t_1):
    @property
    def ApartmentState(self) -> ApartmentState:"""ApartmentState { get; set; } -> ApartmentState"""
    @property
    def CurrentContext(self) -> _n_6_t_0:"""CurrentContext { get; } -> Context"""
    @property
    def CurrentCulture(self) -> _n_3_t_0:"""CurrentCulture { get; set; } -> CultureInfo"""
    @property
    def CurrentPrincipal(self) -> _n_9_t_0:"""CurrentPrincipal { get; set; } -> IPrincipal"""
    @property
    def CurrentThread(self) -> Thread:"""CurrentThread { get; } -> Thread"""
    @property
    def CurrentUICulture(self) -> _n_3_t_0:"""CurrentUICulture { get; set; } -> CultureInfo"""
    @property
    def ExecutionContext(self) -> ExecutionContext:"""ExecutionContext { get; } -> ExecutionContext"""
    @property
    def IsAlive(self) -> bool:"""IsAlive { get; } -> bool"""
    @property
    def IsBackground(self) -> bool:"""IsBackground { get; set; } -> bool"""
    @property
    def IsThreadPoolThread(self) -> bool:"""IsThreadPoolThread { get; } -> bool"""
    @property
    def ManagedThreadId(self) -> int:"""ManagedThreadId { get; } -> int"""
    @property
    def Name(self) -> str:"""Name { get; set; } -> str"""
    @property
    def Priority(self) -> ThreadPriority:"""Priority { get; set; } -> ThreadPriority"""
    @property
    def ThreadState(self) -> ThreadState:"""ThreadState { get; } -> ThreadState"""
    def __init__(self, start: ParameterizedThreadStart, maxStackSize: int) -> Thread:...
    def __init__(self, start: ParameterizedThreadStart) -> Thread:...
    def __init__(self, start: ThreadStart, maxStackSize: int) -> Thread:...
    def __init__(self, start: ThreadStart) -> Thread:...
    def Abort(self):...
    def Abort(self, stateInfo: object):...
    @staticmethod
    def AllocateDataSlot() -> _n_1_t_20:...
    @staticmethod
    def AllocateNamedDataSlot(name: str) -> _n_1_t_20:...
    @staticmethod
    def BeginCriticalRegion():...
    @staticmethod
    def BeginThreadAffinity():...
    def DisableComObjectEagerCleanup(self):...
    @staticmethod
    def EndCriticalRegion():...
    @staticmethod
    def EndThreadAffinity():...
    @staticmethod
    def FreeNamedDataSlot(name: str):...
    def GetApartmentState(self) -> ApartmentState:...
    def GetCompressedStack(self) -> CompressedStack:...
    @staticmethod
    def GetData(slot: _n_1_t_20) -> object:...
    @staticmethod
    def GetDomain() -> _n_1_t_21:...
    @staticmethod
    def GetDomainID() -> int:...
    @staticmethod
    def GetNamedDataSlot(name: str) -> _n_1_t_20:...
    def Interrupt(self):...
    def Join(self, timeout: _n_1_t_9) -> bool:...
    def Join(self, millisecondsTimeout: int) -> bool:...
    def Join(self):...
    @staticmethod
    def MemoryBarrier():...
    @staticmethod
    def ResetAbort():...
    def Resume(self):...
    def SetApartmentState(self, state: ApartmentState):...
    def SetCompressedStack(self, stack: CompressedStack):...
    @staticmethod
    def SetData(slot: _n_1_t_20, data: object):...
    @staticmethod
    def Sleep(timeout: _n_1_t_9):...
    @staticmethod
    def Sleep(millisecondsTimeout: int):...
    @staticmethod
    def SpinWait(iterations: int):...
    def Start(self, parameter: object):...
    def Start(self):...
    def Suspend(self):...
    def TrySetApartmentState(self, state: ApartmentState) -> bool:...
    @staticmethod
    def VolatileRead(address: object) -> object:...
    @staticmethod
    def VolatileRead(address: float) -> float:...
    @staticmethod
    def VolatileRead(address: _n_1_t_22) -> _n_1_t_22:...
    @staticmethod
    def VolatileRead(address: _n_1_t_23) -> _n_1_t_23:...
    @staticmethod
    def VolatileRead(address: _n_1_t_14) -> _n_1_t_14:...
    @staticmethod
    def VolatileRead(address: _n_1_t_17) -> _n_1_t_17:...
    @staticmethod
    def VolatileRead(address: _n_1_t_24) -> _n_1_t_24:...
    @staticmethod
    def VolatileRead(address: _n_1_t_25) -> _n_1_t_25:...
    @staticmethod
    def VolatileRead(address: int) -> int:...
    @staticmethod
    def VolatileRead(address: _n_1_t_26) -> _n_1_t_26:...
    @staticmethod
    def VolatileWrite(address: object, value: object):...
    @staticmethod
    def VolatileWrite(address: float, value: float):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_22, value: _n_1_t_22):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_23, value: _n_1_t_23):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_14, value: _n_1_t_14):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_17, value: _n_1_t_17):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_24, value: _n_1_t_24):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_25, value: _n_1_t_25):...
    @staticmethod
    def VolatileWrite(address: int, value: int):...
    @staticmethod
    def VolatileWrite(address: _n_1_t_26, value: _n_1_t_26):...
    @staticmethod
    def Yield() -> bool:...
class ThreadAbortException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    @property
    def ExceptionState(self) -> object:"""ExceptionState { get; } -> object"""
class ThreadExceptionEventArgs(_n_1_t_27):
    @property
    def Exception(self) -> _n_1_t_1:"""Exception { get; } -> Exception"""
    def __init__(self, t: _n_1_t_1) -> ThreadExceptionEventArgs:...
class ThreadExceptionEventHandler(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> ThreadExceptionEventHandler:...
    def BeginInvoke(self, sender: object, e: ThreadExceptionEventArgs, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, sender: object, e: ThreadExceptionEventArgs):...
class ThreadInterruptedException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> ThreadInterruptedException:...
    def __init__(self, message: str) -> ThreadInterruptedException:...
    def __init__(self) -> ThreadInterruptedException:...
class ThreadLocal(_n_1_t_7, typing.Generic[T]):
    @property
    def IsValueCreated(self) -> bool:"""IsValueCreated { get; } -> bool"""
    @property
    def Value(self) -> T:"""Value { get; set; } -> T"""
    @property
    def Values(self) -> _n_2_t_0[T]:"""Values { get; } -> IList"""
    def __init__(self, valueFactory: _n_1_t_18[T], trackAllValues: bool) -> ThreadLocal:...
    def __init__(self, valueFactory: _n_1_t_18[T]) -> ThreadLocal:...
    def __init__(self, trackAllValues: bool) -> ThreadLocal:...
    def __init__(self) -> ThreadLocal:...
class ThreadPool(object):
    @staticmethod
    def BindHandle(osHandle: _n_5_t_2) -> bool:...
    @staticmethod
    def BindHandle(osHandle: _n_1_t_14) -> bool:...
    @staticmethod
    def GetAvailableThreads(workerThreads: int, completionPortThreads: int):...
    @staticmethod
    def GetMaxThreads(workerThreads: int, completionPortThreads: int):...
    @staticmethod
    def GetMinThreads(workerThreads: int, completionPortThreads: int):...
    @staticmethod
    def QueueUserWorkItem(callBack: WaitCallback) -> bool:...
    @staticmethod
    def QueueUserWorkItem(callBack: WaitCallback, state: object) -> bool:...
    @staticmethod
    def RegisterWaitForSingleObject(waitObject: WaitHandle, callBack: WaitOrTimerCallback, state: object, timeout: _n_1_t_9, executeOnlyOnce: bool) -> RegisteredWaitHandle:...
    @staticmethod
    def RegisterWaitForSingleObject(waitObject: WaitHandle, callBack: WaitOrTimerCallback, state: object, millisecondsTimeOutInterval: int, executeOnlyOnce: bool) -> RegisteredWaitHandle:...
    @staticmethod
    def RegisterWaitForSingleObject(waitObject: WaitHandle, callBack: WaitOrTimerCallback, state: object, millisecondsTimeOutInterval: _n_1_t_17, executeOnlyOnce: bool) -> RegisteredWaitHandle:...
    @staticmethod
    def SetMaxThreads(workerThreads: int, completionPortThreads: int) -> bool:...
    @staticmethod
    def SetMinThreads(workerThreads: int, completionPortThreads: int) -> bool:...
    @staticmethod
    def UnsafeQueueNativeOverlapped(overlapped: NativeOverlapped) -> bool:...
    @staticmethod
    def UnsafeQueueUserWorkItem(callBack: WaitCallback, state: object) -> bool:...
    @staticmethod
    def UnsafeRegisterWaitForSingleObject(waitObject: WaitHandle, callBack: WaitOrTimerCallback, state: object, timeout: _n_1_t_9, executeOnlyOnce: bool) -> RegisteredWaitHandle:...
    @staticmethod
    def UnsafeRegisterWaitForSingleObject(waitObject: WaitHandle, callBack: WaitOrTimerCallback, state: object, millisecondsTimeOutInterval: int, executeOnlyOnce: bool) -> RegisteredWaitHandle:...
    @staticmethod
    def UnsafeRegisterWaitForSingleObject(waitObject: WaitHandle, callBack: WaitOrTimerCallback, state: object, millisecondsTimeOutInterval: _n_1_t_17, executeOnlyOnce: bool) -> RegisteredWaitHandle:...
class ThreadPoolBoundHandle(_n_1_t_7):
    @property
    def Handle(self) -> _n_5_t_2:"""Handle { get; } -> SafeHandle"""
    def AllocateNativeOverlapped(self, preAllocated: PreAllocatedOverlapped) -> NativeOverlapped:...
    def AllocateNativeOverlapped(self, callback: IOCompletionCallback, state: object, pinData: object) -> NativeOverlapped:...
    @staticmethod
    def BindHandle(handle: _n_5_t_2) -> ThreadPoolBoundHandle:...
    def FreeNativeOverlapped(self, overlapped: NativeOverlapped):...
    @staticmethod
    def GetNativeOverlappedState(overlapped: NativeOverlapped) -> object:...
class ThreadPriority(_n_1_t_2, _n_1_t_3, _n_1_t_4, _n_1_t_5):
    AboveNormal: int
    BelowNormal: int
    Highest: int
    Lowest: int
    Normal: int
    value__: int
class ThreadStart(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> ThreadStart:...
    def BeginInvoke(self, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self):...
class ThreadStartException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    pass
class ThreadState(_n_1_t_2, _n_1_t_3, _n_1_t_4, _n_1_t_5):
    Aborted: int
    AbortRequested: int
    Background: int
    Running: int
    Stopped: int
    StopRequested: int
    Suspended: int
    SuspendRequested: int
    Unstarted: int
    value__: int
    WaitSleepJoin: int
class ThreadStateException(_n_1_t_0, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> ThreadStateException:...
    def __init__(self, message: str) -> ThreadStateException:...
    def __init__(self) -> ThreadStateException:...
class Timeout(object):
    Infinite: int
    InfiniteTimeSpan: int
class Timer(_n_1_t_19, _n_1_t_7):
    def __init__(self, callback: TimerCallback) -> Timer:...
    def __init__(self, callback: TimerCallback, state: object, dueTime: _n_1_t_17, period: _n_1_t_17) -> Timer:...
    def __init__(self, callback: TimerCallback, state: object, dueTime: _n_1_t_9, period: _n_1_t_9) -> Timer:...
    def __init__(self, callback: TimerCallback, state: object, dueTime: int, period: int) -> Timer:...
    def Change(self, dueTime: _n_1_t_17, period: _n_1_t_17) -> bool:...
    def Change(self, dueTime: _n_1_t_9, period: _n_1_t_9) -> bool:...
    def Change(self, dueTime: int, period: int) -> bool:...
class TimerCallback(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> TimerCallback:...
    def BeginInvoke(self, state: object, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, state: object):...
class Volatile(object):
    @staticmethod
    def Read(location: float) -> float:...
    @staticmethod
    def Read(location: _n_1_t_23) -> _n_1_t_23:...
    @staticmethod
    def Read(location: _n_1_t_14) -> _n_1_t_14:...
    @staticmethod
    def Read(location: _n_1_t_22) -> _n_1_t_22:...
    @staticmethod
    def Read(location: _n_1_t_17) -> _n_1_t_17:...
    @staticmethod
    def Read(location: _n_1_t_24) -> _n_1_t_24:...
    @staticmethod
    def Read(location: _n_1_t_26) -> _n_1_t_26:...
    @staticmethod
    def Read(location: _n_1_t_25) -> _n_1_t_25:...
    @staticmethod
    def Read(location: bool) -> bool:...
    @staticmethod
    def Read(location: object) -> typing.Any:...
    @staticmethod
    def Read(location: int) -> int:...
    @staticmethod
    def Write(location: float, value: float):...
    @staticmethod
    def Write(location: _n_1_t_23, value: _n_1_t_23):...
    @staticmethod
    def Write(location: _n_1_t_14, value: _n_1_t_14):...
    @staticmethod
    def Write(location: _n_1_t_22, value: _n_1_t_22):...
    @staticmethod
    def Write(location: _n_1_t_17, value: _n_1_t_17):...
    @staticmethod
    def Write(location: _n_1_t_24, value: _n_1_t_24):...
    @staticmethod
    def Write(location: _n_1_t_26, value: _n_1_t_26):...
    @staticmethod
    def Write(location: _n_1_t_25, value: _n_1_t_25):...
    @staticmethod
    def Write(location: bool, value: bool):...
    @staticmethod
    def Write(location: object, value: typing.Any):...
    @staticmethod
    def Write(location: int, value: int):...
class WaitCallback(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> WaitCallback:...
    def BeginInvoke(self, state: object, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, state: object):...
class WaitHandle(_n_1_t_19, _n_1_t_7):
    WaitTimeout: int
    @property
    def Handle(self) -> _n_1_t_14:"""Handle { get; set; } -> IntPtr"""
    @property
    def SafeWaitHandle(self) -> _n_0_t_0:"""SafeWaitHandle { get; set; } -> SafeWaitHandle"""
    def Close(self):...
    @staticmethod
    def SignalAndWait(toSignal: WaitHandle, toWaitOn: WaitHandle, millisecondsTimeout: int, exitContext: bool) -> bool:...
    @staticmethod
    def SignalAndWait(toSignal: WaitHandle, toWaitOn: WaitHandle, timeout: _n_1_t_9, exitContext: bool) -> bool:...
    @staticmethod
    def SignalAndWait(toSignal: WaitHandle, toWaitOn: WaitHandle) -> bool:...
    @staticmethod
    def WaitAll(waitHandles: _n_1_t_11[WaitHandle], timeout: _n_1_t_9) -> bool:...
    @staticmethod
    def WaitAll(waitHandles: _n_1_t_11[WaitHandle], millisecondsTimeout: int) -> bool:...
    @staticmethod
    def WaitAll(waitHandles: _n_1_t_11[WaitHandle]) -> bool:...
    @staticmethod
    def WaitAll(waitHandles: _n_1_t_11[WaitHandle], timeout: _n_1_t_9, exitContext: bool) -> bool:...
    @staticmethod
    def WaitAll(waitHandles: _n_1_t_11[WaitHandle], millisecondsTimeout: int, exitContext: bool) -> bool:...
    @staticmethod
    def WaitAny(waitHandles: _n_1_t_11[WaitHandle], millisecondsTimeout: int) -> int:...
    @staticmethod
    def WaitAny(waitHandles: _n_1_t_11[WaitHandle]) -> int:...
    @staticmethod
    def WaitAny(waitHandles: _n_1_t_11[WaitHandle], timeout: _n_1_t_9) -> int:...
    @staticmethod
    def WaitAny(waitHandles: _n_1_t_11[WaitHandle], timeout: _n_1_t_9, exitContext: bool) -> int:...
    @staticmethod
    def WaitAny(waitHandles: _n_1_t_11[WaitHandle], millisecondsTimeout: int, exitContext: bool) -> int:...
    def WaitOne(self, timeout: _n_1_t_9) -> bool:...
    def WaitOne(self, millisecondsTimeout: int) -> bool:...
    def WaitOne(self) -> bool:...
    def WaitOne(self, timeout: _n_1_t_9, exitContext: bool) -> bool:...
    def WaitOne(self, millisecondsTimeout: int, exitContext: bool) -> bool:...
    def GetSafeWaitHandle(self) -> _n_0_t_0:
        """Extension from: System.Threading.WaitHandleExtensions"""
    def SetSafeWaitHandle(self, value: _n_0_t_0):
        """Extension from: System.Threading.WaitHandleExtensions"""
class WaitHandleCannotBeOpenedException(_n_1_t_28, _n_7_t_0, _n_5_t_0):
    def __init__(self, message: str, innerException: _n_1_t_1) -> WaitHandleCannotBeOpenedException:...
    def __init__(self, message: str) -> WaitHandleCannotBeOpenedException:...
    def __init__(self) -> WaitHandleCannotBeOpenedException:...
class WaitHandleExtensions(object):
    @staticmethod
    def GetSafeWaitHandle(waitHandle: WaitHandle) -> _n_0_t_0:...
    @staticmethod
    def SetSafeWaitHandle(waitHandle: WaitHandle, value: _n_0_t_0):...
class WaitOrTimerCallback(_n_1_t_12, _n_1_t_13, _n_7_t_0):
    def __init__(self, object: object, method: _n_1_t_14) -> WaitOrTimerCallback:...
    def BeginInvoke(self, state: object, timedOut: bool, callback: _n_1_t_16, object: object) -> _n_1_t_15:...
    def EndInvoke(self, result: _n_1_t_15):...
    def Invoke(self, state: object, timedOut: bool):...
